package cipm.consistency.fitests.similarity.params;

import java.util.ArrayList;
import java.util.Collection;
import java.util.function.Predicate;

import cipm.consistency.initialisers.IInitialiser;
import cipm.consistency.initialisers.IInitialiserBase;
import cipm.consistency.initialisers.IInitialiserPackage;

/**
 * An interface meant for classes that generate {@link IInitialiser} instances
 * for tests. <br>
 * <br>
 * Implementors of this interface can be used to supply parameterised tests with
 * {@link IInitialiser} instances.
 */
public interface IInitialiserParameters {
	/**
	 * @return The {@link IInitialiserPackage} that will be used to generate
	 *         initialiser parameters for tests.
	 */
	public IInitialiserPackage getUsedInitialiserPackage();

	/**
	 * @return An instance of all {@link IInitialiser}s this encompasses. The
	 *         returned {@link IInitialiser}s are not adapted.
	 */
	public default Collection<IInitialiser> getAllNonAdaptedInitialisers() {
		return this.getUsedInitialiserPackage().getAllInitialiserInstances();
	}

	/**
	 * @return An adapted instance of all adaptable initialisers this encompasses.
	 *         Adaptation logic returned by {@link #getAdaptationStrategy()} is used
	 *         to adapt the generated initialiser instances. Only returns
	 *         initialisers that are adapted.
	 */
	public default Collection<IInitialiserBase> getAllAdaptedInitialisers() {
		var result = new ArrayList<IInitialiserBase>();
		var inits = this.getEachInitialiserOnce();

		inits.forEach((init) -> {
			if (init instanceof IInitialiserBase && ((IInitialiserBase) init).isAdapted())
				result.add((IInitialiserBase) init);
		});

		return result;
	}

	/**
	 * Shortcut for {@link #getAllNonAdaptedInitialisers()} and
	 * {@link #getAllAdaptedInitialisers()}. <br>
	 * <br>
	 * <b>Note: If a certain initialiser type is adaptable, returns one non-adapted
	 * and one adapted instance.</b>
	 * 
	 * @see {@link #getEachInitialiserOnce()}
	 */
	public default Collection<IInitialiser> getAllInitialisers() {
		var result = new ArrayList<IInitialiser>();
		result.addAll(this.getAllNonAdaptedInitialisers());
		result.addAll(this.getAllAdaptedInitialisers());
		return result;
	}

	/**
	 * @return The {@link IInitialiserParameterAdaptationStrategy} responsible for
	 *         adapting the generated initialisers for
	 *         {@link #getAdaptedInitialisersBySuper(Class)}.
	 */
	public IInitialiserParameterAdaptationStrategy getAdaptationStrategy();

	/**
	 * @return All {@link IInitialiser} instances generated by
	 *         {@link #getAllNonAdaptedInitialisers()} that fulfil the given
	 *         predicate.
	 */
	public default Collection<IInitialiser> getNonAdaptedInitialisersBy(Predicate<IInitialiser> pred) {
		var result = new ArrayList<IInitialiser>();
		this.getAllNonAdaptedInitialisers().stream().filter(pred).forEach((i) -> result.add(i));
		return result;
	}

	/**
	 * @return All {@link IInitialiser} instances generated by
	 *         {@link #getAllAdaptedInitialisers()} that fulfil the given predicate.
	 */
	public default Collection<IInitialiser> getAdaptedInitialisersBy(Predicate<IInitialiser> pred) {
		var result = new ArrayList<IInitialiser>();
		this.getAllAdaptedInitialisers().stream().filter(pred).forEach((i) -> result.add(i));
		return result;
	}

	/**
	 * @return All {@link IInitialiser} instances generated by
	 *         {@link #getAllInitialisers()} that fulfil the given predicate.
	 */
	public default Collection<IInitialiser> getAllInitialisersBy(Predicate<IInitialiser> pred) {
		var result = new ArrayList<IInitialiser>();
		this.getAllInitialisers().stream().filter(pred).forEach((i) -> result.add(i));
		return result;
	}

	/**
	 * @return All {@link IInitialiser} instances generated by
	 *         {@link #getAllNonAdaptedInitialisers()} that extend the given class
	 *         T.
	 */
	@SuppressWarnings("unchecked")
	public default <T extends IInitialiser> Collection<T> getNonAdaptedInitialisersBySuper(Class<T> cls) {
		return (Collection<T>) this.getNonAdaptedInitialisersBy((i) -> cls.isInstance(i));
	}

	/**
	 * @return Adapted versions of all {@link IInitialiser} instances generated by
	 *         {@link #getAllAdaptedInitialisers()} that extend the given class T.
	 */
	@SuppressWarnings("unchecked")
	public default <T extends IInitialiser> Collection<T> getAdaptedInitialisersBySuper(Class<T> cls) {
		return (Collection<T>) this.getAdaptedInitialisersBy((i) -> cls.isInstance(i));
	}

	/**
	 * @return All {@link IInitialiser} instances generated by
	 *         {@link #getAllInitialisers()} that extend the given class.
	 * 
	 * @see {@link #getEachInitialiserOnceBySuper(Class)}
	 */
	@SuppressWarnings("unchecked")
	public default <T extends IInitialiser> Collection<T> getAllInitialisersBySuper(Class<T> cls) {
		return (Collection<T>) this.getAllInitialisersBy((i) -> cls.isInstance(i));
	}

	/**
	 * @return An instance of each {@link IInitialiser} from
	 *         {@link #getAllNonAdaptedInitialisers()}. Use this method, if only one
	 *         instance init of each initialiser is desired. If
	 *         {@link #getAdaptationStrategy()} can adapt init, it will do so.
	 * 
	 * @see {@link #getAllInitialisers()}
	 */
	public default Collection<IInitialiser> getEachInitialiserOnce() {
		var result = this.getAllNonAdaptedInitialisers();
		this.adaptInitialisers(result);
		return result;
	}

	/**
	 * @return An instance of each {@link IInitialiser} from
	 *         {@link #getEachInitialiserOnce()}. Use this method, if only one
	 *         instance init of each initialiser is desired. If
	 *         {@link #getAdaptationStrategy()} can adapt init, it will do so.
	 * 
	 * @see {@link #getAllInitialisersBySuper(Class)}
	 */
	@SuppressWarnings("unchecked")
	public default <T extends IInitialiser> Collection<T> getEachInitialiserOnceBySuper(Class<T> cls) {
		var result = new ArrayList<T>();
		this.getEachInitialiserOnce().stream().filter((init) -> cls.isInstance(init))
				.forEach((init) -> result.add((T) init));

		return result;
	}

	/**
	 * Applies the adaptation logic encapsulated by
	 * {@link IInitialiserParameterAdaptationStrategy} returned by
	 * {@link #getAdaptationStrategy()}. Non-adaptable initialisers will be
	 * unaffected.
	 */
	public default <T extends IInitialiser> void adaptInitialisers(Collection<T> inits) {
		var strat = this.getAdaptationStrategy();

		if (strat != null) {
			strat.adaptInitialisers(inits);
		}
	}
}
