package cipm.consistency.fitests.similarity.jamopp.unittests;

import org.emftext.language.java.expressions.Expression;
import org.emftext.language.java.statements.NormalSwitchCase;

import cipm.consistency.initialisers.jamopp.statements.NormalSwitchCaseInitialiser;

/**
 * An interface that can be implemented by tests, which work with
 * {@link SwitchCase} instances. <br>
 * <br>
 * Contains methods that can be used to create {@link SwitchCase} instances.
 */
public interface UsesSwitchCases extends UsesExpressions {
	/**
	 * @param addConds The additional conditions that will be added to the instance
	 *                 to be constructed
	 * @return A {@link NormalSwitchCase} with the given parameters
	 */
	public default NormalSwitchCase createMinimalNSC(Expression[] addConds) {
		var nscInit = new NormalSwitchCaseInitialiser();
		var nsc = nscInit.instantiate();
		nscInit.addAdditionalConditions(nsc, addConds);
		return nsc;
	}

	/**
	 * A variant of {@link #createMinimalNSC(Expression[])} that uses a single
	 * {@link Expression} generated by {@link #createMinimalFalseEE()}.
	 */
	public default NormalSwitchCase createMinimalNSC() {
		return this.createMinimalNSC(new Expression[] { this.createMinimalFalseEE() });
	}

	/**
	 * A variant of {@link #createMinimalNSC()} that has no additional conditions
	 */
	public default NormalSwitchCase createEmptyNSC() {
		return this.createMinimalNSC(null);
	}
}
